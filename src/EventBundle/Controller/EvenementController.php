<?php

namespace EventBundle\Controller;


use DateTime;
use EventBundle\Entity\Evenement;
use EventBundle\Entity\Participants;
use Symfony\Component\Form\Extension\Core\Type\ChoiceType;
use Symfony\Component\Form\Extension\Core\Type\FileType;
use Symfony\Component\Form\Extension\Core\Type\TextareaType;
use Symfony\Component\HttpFoundation\JsonResponse;
use UserBundle\Entity\User;
use Symfony\Component\Serializer\Normalizer\ObjectNormalizer;
use Symfony\Component\Serializer\Serializer;

use Doctrine\ORM\EntityManagerInterface;
use Symfony\Component\Form\FormFactoryInterface;

use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Method;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Route;
use Symfony\Component\HttpFoundation\Request;


use EventBundle\Form\EvenementType;

use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Security\Core\Security;
use Swift_Message;


class EvenementController extends Controller
{


    public function __construct()
    {

    }

    /**
     * @return string
     */
    private function generateUniqueFileName()
    {
        // md5() reduces the similarity of the file names generated by
        // uniqid(), which is based on timestamps
        return md5(uniqid());
    }

    public function indexAction(Request $request)
    {
        $user = $this->container->get('security.token_storage')->getToken()->getUser();


        $em = $this->getDoctrine()->getManager();

        $evenement = new Evenement();
        $form = $this->createForm(EvenementType::class, $evenement);
        $form->handleRequest($request);


        if ($form->isSubmitted() && $form->isValid()) {

            // $file stores the uploaded PDF file
            /** @var Symfony\Component\HttpFoundation\File\UploadedFile $file */
            $file = $evenement->getImage();

            $fileName = $this->generateUniqueFileName() . '.' . $file->guessExtension();

            // Move the file to the directory where brochures are stored
            try {
                $file->move(
                    $this->getParameter('image_directory'),
                    $fileName
                );
            } catch (FileException $e) {
                // ... handle exception if something happens during file upload
            }

            // updates the 'brochure' property to store the PDF file name
            // instead of its contents
            $evenement->setImage($fileName);
           /* $result = $evenement->getDateFin()->format('Y-m-d H:i:s');
            $datetime = new DateTime($result);
            $datetime->modify('+1 day');
            var_dump($datetime
                );
            die();*/
            // ... persist the $product variable or any other work

//            return $this->redirect($this->generateUrl('app_product_list'));

            $evenement->setResponsable($user);
            if ($evenement->getDateFin() > $evenement->getDateDebut()) {
                $diff = date_diff($evenement->getDateFin(), $evenement->getDateDebut());
                if ($diff->m < 6) {
                    $dateCreation = new\DateTime('now');
                    $evenement->setDateCreation($dateCreation);
                 //   $evenement->getDateFin();

                    $em->persist($evenement);
                    $em->flush();
                }
            }

            //   $this->envoyerEmail($evenement);
            //    return array('id' => $evenement->getId());
//            return $this->redirectToRoute('evenement_index');

        }

        $evenements = $this->getDoctrine()->getRepository('EventBundle:Evenement')->findAll();
        $myevents = $this->getDoctrine()->getRepository('EventBundle:Evenement')->findByResponsable($user);

        return $this->render('@Event/evenement/index.html.twig', array('myevents' => $myevents, 'evenements' => $evenements, 'form' => $form->createView()));
    }


//    public function detailsAction($id)
//    {
//
//        $event = $this->getDoctrine()
//            ->getRepository('EventBundle:Evenement')
//            ->find($id);
//        return $this->render('todos/details.html.twig', array(
//
//            'todo' => $event
//
//        ));
//
//    }

    public function deleteAction($id)
    {

        $sn = $this->getDoctrine()->getManager();
        $event = $sn->getRepository('EventBundle:Evenement')->find($id);
        $sn->remove($event);
        $sn->flush();
        return $this->redirectToRoute('evenement_index');

    }


    public function detailAction($id)
    {

        $sn = $this->getDoctrine()->getManager();
        $event = $sn->getRepository('EventBundle:Evenement')->find($id);


        return $this->render('@Event/evenement/detail.html.twig', array('event' => $event));

    }

    public function editAction($id, Request $request)
    {


//        $now = new\DateTime('now');
        $event = $this->getDoctrine()
            ->getRepository('EventBundle:Evenement')
            ->find($id);

        if ($request->isMethod("post")) {
            $event->setNomEvenement($request->get('nomEvenement'));
            $event->setType($request->get('type'));
            $event->setAdr($request->get('adr'));
            $event->setDescription($request->get('description'));
            if ($request->files->get('image')) {
                /** @var Symfony\Component\HttpFoundation\File\UploadedFile $file */
                $file = $request->files->get('image');
                $fileName = $this->generateUniqueFileName() . '.' . $file->guessExtension();
                $file->move(
                    $this->getParameter('image_directory'),
                    $fileName
                );
                $event->setImage($fileName);

            }

            $event->setPrix($request->get('prix'));
            $event->setNbreplace($request->get('nbreplace'));
            $event->setNbreplace($request->get('telresponsable'));
            $event->setDateDebut(new\DateTime($request->get('dateDebut')));
            $event->setDateFin(new\DateTime($request->get('dateFin')));
            $sn = $this->getDoctrine()->getManager();
            $sn->flush();

            return $this->redirectToRoute('evenement_index');
        }

        return $this->render('@Event/evenement/editEvent.html.twig', array(

            'event' => $event,
        ));

    }


    public function modifyAction(Request $request)
    {

        $em = $this->getDoctrine()->getManager();
        $titre = $request->get('event');
        $start = $request->get('datedebut');
        $end = $request->get('datefin');
        $user = $request->get('user');
        $evenement = $em->getRepository(Evenement::class)->findOneBy(array("nomEvenement" => $titre));
        if ($user != $evenement->getResponsable()->getId()) {
            return new Response("no");
        }
        $evenement->setDateDebut(new \DateTime($start));
        $evenement->setDateFin(new \DateTime($end));
        $em->merge($evenement);
        $em->flush();
        return new Response("yes");
    }


//debut fonction recherche
    public function searchAction(Request $request)
    {
        $em = $this->getDoctrine()->getManager();
        $requestString = $request->get('q');
        $entities = $em->getRepository('EventBundle:Evenement')->findEntitiesByString($requestString);
        if (!$entities) {
            $result['entities']['error'] = "PAS D'EVENEMENT ";
        } else {
//            $nom=$entities->getNom();
//            $prenom=$entities->getPreom();
            $result['entities'] = $this->getRealEntities($entities);
        }
        return new Response(json_encode($result));

    }


    public function getRealEntities($entities)
    {
        foreach ($entities as $entity) {
            $realEntities[$entity->getId()] = [
                $entity->getnomEvenement(),
                $entity->getImage(),
                $entity->getPrix(),
                $entity->getDescription(),
                $entity->getType(),
                $entity->getDateDebut()->format("Y-m-d"),
                $entity->getDateFin()->format("Y-m-d"),
                $entity->getResponsable()->getNom()

            ];
        }
        return $realEntities;
    }

//fin fonction recherche


    public function listInvitAction()
    {
        $em = $this->getDoctrine()->getManager();
        $events = $em->getRepository("EventBundle:Evenement")->findAll();
        return $this->render('@Event\evenement\listInvit.html.twig', array("events" => $events));
    }


    public function listParticipateAction()
    {
        $em = $this->getDoctrine()->getManager();
        $events = $em->getRepository("EventBundle:Participants")->findAll();
        return $this->render('@Event\evenement\participate.html.twig', array("events" => $events[0]));
    }


    public function participerAction($id)
    {
        $user = $this->container->get('security.token_storage')->getToken()->getUser();

        $m = $this->getDoctrine()->getManager();
        $event = $m->getRepository('EventBundle:Evenement')->find($id);
        $existe = $m->getRepository('EventBundle:Participants')->findBy(array('userid' => $user, 'evenement' => $id));
        if ($existe == null) {
            $m->persist($event);
            $participe = new Participants();
            $participe->setEvenement($event);
            $participe->setUserid($user);
            $participe->setConfirmation(0);
            $participe->setDateInscrit(new \DateTime('now'));
            $m->persist($participe);
            $m->flush();


            return $this->redirectToRoute('list_participate');
        } else {
            return $this->redirectToRoute('evenement_index');
        }
    }


    public function guideAction()
    {
        return $this->render("@Event/Evenement/participate.html.twig");
    }

    public function pdfAction()
    {
        $snappy = $this->get('knp_snappy.pdf');

      //  $html = '<h1>Hello</h1>';
        $html = '<!DOCTYPE html>
<html>
<head>
    <meta name="viewport" content="width=device-width, initial-scale=1">



    <style>
    body, html {
        height: 100%;
        margin: 0;
        font-family: Arial, Helvetica, sans-serif;
        }

        * {
        box-sizing: border-box;
        }

        .bg-image {
        /* Full height */
                .img1 { background-image: url("../../../web/uploads/image/1.png")   ;}

        height: 50%;

        /* Center and scale the image nicely */
        background-position: center;
            background-repeat: no-repeat;
            background-size: cover;
        }

        /* Images used */
        .img1 { background-image: url("../../../web/uploads/image/1.png")   ;}
        .img2 { background-image: url("../../../web/uploads/image/2.png"); }


        /* Position text in the middle of the page/image */
        .bg-text {
        // background-color: rgb(0,0,0); /* Fallback color */
        // background-color: rgba(0,0,0, 0.4); /* Black w/opacity/see-through */
        color: black;
        font-weight: bold;
            font-size: 40px;
            position: fixed;
            top: 5%;
            left: 85%;
            transform: translate(-50%, -50%);
            z-index: 2;
            width: 100px;
            padding: 20px;
            text-align: center;
        }
        .bg-text2 {
        // background-color: rgb(0,0,0); /* Fallback color */
        // background-color: rgba(0,0,0, 0.4); /* Black w/opacity/see-through */
        color: black;
        font-weight: bold;
            font-size: 40px;
            position: fixed;
            top: 19%;
            left: 85%;
            transform: translate(-50%, -50%);
            z-index: 2;
            width: 100px;
            padding: 20px;
            text-align: center;
        }
        .bg-text3 {
        // background-color: rgb(0,0,0); /* Fallback color */
        // background-color: rgba(0,0,0, 0.4); /* Black w/opacity/see-through */
        color: black;
        font-weight: bold;
            font-size: 40px;
            position: fixed;
            top: 35%;
            left: 85%;
            transform: translate(-50%, -50%);
            z-index: 2;
            width: 100px;
            padding: 20px;
            text-align: center;
        }
        .bg-text4 {
        // background-color: rgb(0,0,0); /* Fallback color */
        // background-color: rgba(0,0,0, 0.4); /* Black w/opacity/see-through */
        color: black;
        font-weight: bold;
            font-size: 20px;
            position: fixed;
            top: 45%;
            left: 85%;
            transform: translate(-50%, -50%);
            z-index: 2;
            width: 100px;
            padding: 20px;
            text-align: center;
        }
        .bg-text5 {
        // background-color: rgb(0,0,0); /* Fallback color */
        // background-color: rgba(0,0,0, 0.4); /* Black w/opacity/see-through */
        color: black;
        font-weight: bold;
            font-size: 80px;
            position: fixed;
            top: 87%;
            left: 58%;
            transform: translate(-50%, -50%);
            z-index: 2;
            width: 100px;
            padding: 20px;
            text-align: center;
        }
        .bg-text6 {
        // background-color: rgb(0,0,0); /* Fallback color */
        // background-color: rgba(0,0,0, 0.4); /* Black w/opacity/see-through */
        color: black;
        font-weight: bold;
            font-size: 80px;
            position: fixed;
            top: 19%;
            left: 25%;
            transform: translate(-50%, -50%);
            z-index: 2;
            width: 100px;
            padding: 20px;
            text-align: center;
        }
    </style>
</head>
<body>

<div class="bg-image img1"></div>
<div class="bg-image img2"></div>


<div class="bg-text">Rayen</div>
<div class="bg-text2">Hammami</div>
<div class="bg-text3">93258294</div>
<div class="bg-text4">rayenhammami@gmail.com</div>
<div class="bg-text5">50D</div>
<div class="bg-text6">Sahreya</div>
</body>

</html>';

    $filename = 'myFirstSnappyPDF';

        return new Response(
            $snappy->getOutputFromHtml($html),
            200,
            array(
                'Content-Type' => 'application/pdf',
                'Content-Disposition' => 'inline; filename="' . $filename . '.pdf"'
            )
        );
    }

    public function annulerISCRIAction($id)
    {

        $user = $this->getUser();
        $idu = $user->getId();
        $event = $this->getDoctrine()->getManager();
        $invitation = $event->getRepository('EventBundle:Participants')->findOneBy(array('userid' => $idu, 'evenements' => $id, 'confirmation' => false));
        $event->remove($invitation);
        $event->flush();

        return $this->redirectToRoute('evenement_index', array('id' => $id));

    }

    public function envoyerMailAction($id){
        $evenement = $this->getDoctrine()->getRepository('EventBundle:Participants')->findOneBy(['id'=>$id]);
        $random =''.$this->generateRandomString();
        $user = $this->container->get('security.token_storage')->getToken()->getUser();
        $transport = (new \Swift_SmtpTransport('smtp.gmail.com', 587,'tls'))
            ->setUsername('esprit.worldfriendship@gmail.com')
            ->setPassword('sassouki');
        $mailer = new \Swift_Mailer($transport);
        $message = (new \Swift_Message('Confirmation du participation'))
            ->setFrom('esprit.worldfriendship@gmail.com')
            ->setTo($user->getEmail())
            ->setBody(
                $this->renderView(
                // templates/emails/registration.html.twig
                    '@Event/Evenement/Confirmation.html.twig',
                    array('name' => $user->getNom(),)
                ).'and the random string : '.$random,
                'text/html'
            )

        ;
        /* @var $mailer \Swift_Mailer */
            $evenement->setChampsConfirmation($random);
            $em = $this->getDoctrine()->getManager();
            $em->persist($evenement);
            $em->flush();
        $mailer->send($message);


        return $this->listParticipateAction();

    }

    public function generateRandomString($length = 16, $characters = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ')
    {
        $charactersLength = strlen($characters);
        $randomString = '';
        for ($i = 0; $i < $length; $i++) {
            $randomString .= $characters[rand(0, $charactersLength - 1)];
        }
        return $randomString;
    }

    public function envoyerConfirmationAction(Request $request)
    {
        if ($request->isXmlHttpRequest()) {
            $code = $request->request->get('code');
            $exists = $this->getDoctrine()->getRepository('EventBundle:Participants')->findOneBy([

                'champsConfirmation' => $code,

            ]);


            if (!empty($exists)){
                $event = $this->getDoctrine()->getRepository('EventBundle:Evenement')->findOneBy(
                    ['id'=>$exists->getEvenement()->getId()]);

                $event->setNbreplace($event->getNbreplace() - 1);


                    $exists->setConfirmation(True);

                $em = $this->getDoctrine()->getManager();
                $em->persist($event);
                $em->persist($exists);
                $em->flush();
                $serializer = new Serializer([new ObjectNormalizer()]);

                $data = $serializer->normalize([
                    'id' => 'id',
                ]);
                return new JsonResponse($data);
            } else
                return new JsonResponse(null);
        }
        return new JsonResponse();
    }

}







